Revisiting a FreeRTOS port
==========================

Here's an overview of the relatively simple initial FreeRTOS port.

This port is based on `ARM_CM3`.  It's deliberately limited to keep the porting
complexity down.


FreeRTOS's task and scheduler mechanics run *unmodified.*  When FreeRTOS selects
a task to run and activates it, its state is copied from the FreeRTOS TCB into a
kernel Context called the Task Context.  A single Task Context is shared between
all FreeRTOS tasks, including the idle task.


As in a traditional FreeRTOS application, the FreeRTOS API code (e.g. for
operations like "create task" or "send to queue") gets called directly by
application tasks, as C functions.  That is, it also runs on the Task Context.


There is a second Context, however, used for two things:
- Hardware interrupts.
- "System calls."

This is the Interrupt Context, and has priority one higher than the Task Context
to ensure it can preempt the Task when permitted.

The Interrupt Context is normally blocked in a message dispatch loop, waiting
for a message from either a kernel Interrupt object, or the Task Context.
Messages from interrupts cause the dispatcher to call application ISRs *from the
Interrupt Context*, mirroring how FreeRTOS invokes application ISRs from
hardware interrupts.  Messages from the Task Context cause the dispatcher to
perform work on the Task's behalf before replying.


The set of "system calls" handled by the dispatcher is quite small:

- Yield (analogous to PendSV in `ARM_CM3`).
- Set BASEPRI (permitted in `ARM_CM3` because task code is privileged; we must
  provide a backdoor).

Notably missing is "start scheduler," which hooks `SVC` in `ARM_CM3`.  In this
port, the application `main` is run from the Interrupt Context.  It eventually
starts the scheduler with a simple function call, which spins dispatching
messages.

This has the interesting implication that, unlike `ARM_CM3`, the scheduler
actually does have somewhere to return to should it stop.


As in `ARM_CM3`, FreeRTOS handles one interrupt internally: the SysTick timer.


As in `ARM_CM3` there are two yield operations.

- `portYIELD` / `vPortYield` are the equivalent to pending PendSV from a task.
  They send a message to the Interrupt Context.

- `portYIELD_FROM_ISR` is for use from the Interrupt Context itself, and just
  triggers an immediate context switch in the Task Context.


Likewise, the operations for disabling interrupts are different from tasks and
interrupts.  From a task, we generate a message to the Interrupt Context to set
the task's BASEPRI.  From an interrupt, it's not clear whether the operation is
meaningful with the single-interrupt-context design.


