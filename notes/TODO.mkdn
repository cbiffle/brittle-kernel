Kernel
------

Implement keyrings.  Consider factoring them out of Context; evaluate tradeoffs.
Particularly evaluate tradeoffs vs. implementing a similar facility as an
unprivileged process.

Identify and implement any fast paths necessary in IPC.  Context-Gate-Context
seems like a potential candidate, as does Context-ReplyGate-Context.

Should the Null Object be distinct from the behavior of a revoked key?  e.g.
should revoked keys escalate to a supervisor, like a fault, or throw a very
specific exception?

If an interrupt is on a block queue, and is retargeted, it should re-fire to the
new object.  (This gets mooted with notifications, since Interrupts would no
longer be willing to block, and notifications are guaranteed received.)

Implement a destruction permission using a brand bit, at least for Memory for
now.  And other permissions.  See e.g. `20160526-permissions.mkdn`.

Alter the system memory allocator(s) to donate precise, non-pow2 chunks of RAM
in exchange for kernel objects, to improve utilization of RAM.

Would it make sense to disconnect the MPU key storage from Context, so that
multiple Contexts could share one?  It would save 96 bytes if we also stopped
requiring pow2-sized blocks for kernel objects (above).  But I'm not sure how
often Contexts would really share one; it'd be like threads vs. processes in
Unix.

It might be useful to be able to, given a Context service key, access memory
using the address space rights of that Context.  This might live outside the
kernel.

Seriously need to get around to finishing the Faults work.

Identifying Contexts who have delivered to a Context and are waiting for a reply
would be useful for restarting programs after faults.

Notifications would make Interrupts simpler.  I'm pretty certain of that now.


Restricting Gate Rights
-----------------------

Currently, any gate key can be used to both send and receive.  This means that a
client could intercept messages intended for a server.  This is obviously wrong.

The easiest fix would be to dedicate some of the bits in the brand of a gate key
to access control.  We should be able to issue gate keys that are limited in the
following ways:
- Unable to receive.
- Unable to send errors (i.e. cannot simulate the revocation of a receive gate
  key).
- Maybe unable to send?  This would let us restrict servers further.
- Unable to add to a group?

My current inclination is to reserve the top 32 bits of the gate brand for
potential system use.  I can always loosen this later.


Gate Groups
-----------

AKA muxes, in my notes.

See `notes-20160324.mkdn` for more details.


Rebooting
---------

I've hoped that we'd be able to "reboot" objects in-place, by resetting any
internal state and revving the generation number in the object table.  This is
critical for having surgical reboots of systems built out of kernel objects.

We need to figure out the correct semantics for reboots, and audit the existing
kernel object implementations for any reboot-related issues, such as potential
dangling pointers.

One biggie would be ensuring that anyone blocked on a rebooted object gets
resumed with a consistent exception.


Support for deallocation
------------------------

There may be cases in the existing design where deallocation could be
problematic, e.g. potential dangling pointers.  Find these, fix them.

One would want to keep a particular eye out for raw object pointers.

It may also be desirable to revoke keys during destructor execution, though the
current object allocation paths always increment the generation anyway.


Prioritization
--------------

We'll want to be able to change the priority of prioritizable objects (Contexts
and Interrupts being the big ones).  This may mean re-collating any lists that
contain the objects.  Make sure this happens in the right places.

I've put *some* work/thought into this on Context, but check it.  Tests would be
good.


Faulting
--------

A fault in unprivileged code running in a Context should be translated into a
message from the Context to a (configurable) supervisory object.  Note that the
faulted Context cannot simply resume before action is taken, so it may need to
be placed into a new state (other than `sending`).

Consider the use case of a Context acting as an asynchronous message sender
without actually being runnable (i.e. having no actual stack allocated).


Interrupt delivery failures
---------------------------

Decide whether Interrupt objects should try to notify a supervisory object if
their target key refuses message delivery.  (Sort of like a fault.)


Non-Blocking receive
--------------------

Should a Context be able to request a non-blocking receive?  Should it be able
to make the receive phase of a call non-blocking?
