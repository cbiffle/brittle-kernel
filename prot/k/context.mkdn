Context Protocol
================

This is the native protocol spoken by contexts, the kernel objects that
implement tasks at the application and system level.  It allows control of the
context and modification of its content.  Context keys should generally be
closely held by the system, as the operations in this protocol can violate
system invariants (although not kernel ones).


Read Register (0)
-----------------

Reads a register, by index, from the context.

Register indices are inherently platform-specific; see the example list for
ARMv7-M below.

Arguments:
- d0: message selector.
- d1: register index.

Results:
- d0: register contents.


### Example register list for ARMv7-M

- 0 - 15: general-purpose registers r0 - r15.
- 16: program status register.


Write Register (1)
------------------

Writes a register, by index, in the context.

Register indices are shared with Read Register, above.

Arguments:
- d0: selector
- d1: register index
- d2: value

Results: none.


Read Key (2)
------------

Reads a key from the context's keyring by index.

Arguments:
- d0: selector.
- d1: key index.

Results:
- k0: key from context.


Write Key (3)
-------------

Writes a key into the context's keyring.

Arguments:
- d0: selector
- d1: key index
- k0: key

Results: none.


Read MPU Region (4)
-------------------

Reads out the contents of one of the MPU regions.

Arguments:
- d0: selector
- d1: region index

Results:
- d0: result code
- k0: region key


Write MPU Region (5)
--------------------

Alters one of the MPU regions.

The change takes effect when the context is next activated, unless it is
already the active context, in which case it takes effect immediately, before
return from the send.

Primitive memory range keys can be loaded directly into the region registers.
Any other type of key will be treated as a null key and confer no authority.

Arguments:
- d0: selector
- d1: region index
- k1: region key

Results:
- d0: result code
