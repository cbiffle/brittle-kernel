USART Protocols
===============

The USART driver exposes separate ports for the transmitter and receiver side,
each with distinct protocols.


Transmitter Protocol
--------------------

### `send1`

Enqueues a byte for transmission.  In the event of a system failure, the
enqueued byte may not have been transmitted.  To gain more assurance at the
cost of some performance, use together with `flush`.

Returns only when the byte has been enqueued; blocks if the queue is full.

Call:
- `m0`: type code
- `m1`: byte to send (only low 8 bits significant)

Response:
- `m0`: status


### `flush`

Serialize the caller with the transmission data stream.

Returns only when the UART has transmitted every byte enqueued before the
`flush` was received.  From the perspective of a single caller, this means that
every byte delivered before `flush` has been sent.  (This is also true in the
presence of multiple callers, but in that case more stuff may also have been
sent.)

Call:
- `m0`: type code

Response:
- `m0`: status


Receiver Protocol
-----------------

### `receive1`

De-queues a previously received byte.

In this model, bytes come with error flags, conveyed in the top 16 bits of the
response word.


Call:
- `m0`: type code

Response:
- `m0`: status
- `m1`: byte received plus error flags.



